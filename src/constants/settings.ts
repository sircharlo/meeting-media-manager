import type { SettingsGroups, SettingsItems, SettingsValues } from 'src/types';

// Enum Types
export const RESOLUTIONS = [
  '240p',
  '360p',
  '480p',
  '720p',
  //'1080p'
] as const;

/* eslint-disable perfectionist/sort-objects */
export const settingsGroups: SettingsGroups = {
  app: {
    description: 'applicationConfigurationDescription',
    icon: 'mmm-configuration',
    name: 'applicationConfiguration',
  },
  congregationMeetings: {
    description: 'congregationMeetingsDescription',
    icon: 'mmm-lectern',
    name: 'congregationMeetings',
  },
  mediaRetrievalPlayback: {
    description: 'mediaRetrievalAndPlaybackDescription',
    icon: 'mmm-media-settings',
    name: 'mediaRetrievalAndPlayback',
  },
  integrations: {
    description: 'integrationsDescription',
    icon: 'mmm-integrations',
    name: 'integrations',
  },
  advanced: {
    description: 'advancedDescription',
    icon: 'mmm-advanced-settings',
    name: 'advanced',
  },
};

export const settingsDefinitions: SettingsItems = {
  // App
  localAppLang: {
    group: 'app',
    list: 'appLanguages',
    rules: ['notEmpty'],
    type: 'list',
  },
  localDateFormat: {
    group: 'app',
    type: 'text',
  },
  darkMode: {
    group: 'app',
    list: 'darkModes',
    rules: ['notEmpty'],
    type: 'list',
  },
  firstDayOfWeek: {
    group: 'app',
    list: 'days',
    type: 'list',
  },
  autoStartAtLogin: {
    group: 'app',
    type: 'toggle',
  },
  // Congregation Meetings
  congregationName: {
    group: 'congregationMeetings',
    rules: ['notEmpty'],
    type: 'text',
  },
  lang: {
    group: 'congregationMeetings',
    list: 'jwLanguages',
    rules: ['notEmpty'],
    type: 'list',
  },
  langFallback: {
    group: 'congregationMeetings',
    list: 'jwLanguages',
    type: 'list',
  },
  mwDay: {
    group: 'congregationMeetings',
    list: 'days',
    rules: ['notEmpty', 'regular'],
    type: 'list',
    unless: 'disableMediaFetching',
  },
  mwStartTime: {
    group: 'congregationMeetings',
    options: ['meetingTime'],
    rules: ['notEmpty', 'regular'],
    type: 'time',
    unless: 'disableMediaFetching',
  },
  weDay: {
    group: 'congregationMeetings',
    list: 'days',
    rules: ['notEmpty', 'regular'],
    type: 'list',
    unless: 'disableMediaFetching',
  },
  weStartTime: {
    group: 'congregationMeetings',
    options: ['meetingTime'],
    rules: ['notEmpty', 'regular'],
    type: 'time',
    unless: 'disableMediaFetching',
  },
  coWeek: {
    group: 'congregationMeetings',
    options: ['coTuesdays'],
    type: 'date',
    unless: 'disableMediaFetching',
  },
  memorialDate: {
    group: 'congregationMeetings',
    type: 'date',
    beta: true,
    options: ['futureDate'],
    unless: 'disableMediaFetching',
  },
  meetingScheduleChangeDate: {
    group: 'congregationMeetings',
    type: 'date',
    options: ['futureDate'],
    subgroup: 'meetingScheduleChange',
    unless: 'disableMediaFetching',
  },
  meetingScheduleChangeOnce: {
    group: 'congregationMeetings',
    depends: 'meetingScheduleChangeDate',
    subgroup: 'meetingScheduleChange',
    type: 'toggle',
    unless: 'disableMediaFetching',
  },
  meetingScheduleChangeMwDay: {
    group: 'congregationMeetings',
    depends: 'meetingScheduleChangeDate',
    list: 'days',
    rules: ['regular'],
    subgroup: 'meetingScheduleChange',
    type: 'list',
    unless: 'disableMediaFetching',
  },
  meetingScheduleChangeMwStartTime: {
    group: 'congregationMeetings',
    depends: 'meetingScheduleChangeDate',
    options: ['meetingTime'],
    rules: ['regular'],
    subgroup: 'meetingScheduleChange',
    type: 'time',
    unless: 'disableMediaFetching',
  },
  meetingScheduleChangeWeDay: {
    group: 'congregationMeetings',
    depends: 'meetingScheduleChangeDate',
    list: 'days',
    rules: ['regular'],
    subgroup: 'meetingScheduleChange',
    type: 'list',
    unless: 'disableMediaFetching',
  },
  meetingScheduleChangeWeStartTime: {
    group: 'congregationMeetings',
    depends: 'meetingScheduleChangeDate',
    options: ['meetingTime'],
    rules: ['regular'],
    subgroup: 'meetingScheduleChange',
    type: 'time',
    unless: 'disableMediaFetching',
  },
  // Media Retrieval and Playback
  meteredConnection: {
    group: 'mediaRetrievalPlayback',
    type: 'toggle',
  },
  enableMediaDisplayButton: {
    group: 'mediaRetrievalPlayback',
    type: 'toggle',
  },
  beginPlaybackPaused: {
    depends: 'enableMediaDisplayButton',
    group: 'mediaRetrievalPlayback',
    type: 'toggle',
  },
  enableMusicButton: {
    group: 'mediaRetrievalPlayback',
    subgroup: 'setupWizard.backgroundMusic',
    type: 'toggle',
  },
  autoStartMusic: {
    depends: 'enableMusicButton',
    group: 'mediaRetrievalPlayback',
    subgroup: 'setupWizard.backgroundMusic',
    type: 'toggle',
    unless: 'disableMediaFetching',
  },
  meetingStopBufferSeconds: {
    depends: 'enableMusicButton',
    group: 'mediaRetrievalPlayback',
    subgroup: 'setupWizard.backgroundMusic',
    type: 'slider',
    min: 0,
    max: 300,
    step: 5,
    unless: 'disableMediaFetching',
  },
  enableExtraCache: {
    depends: 'enableMediaDisplayButton',
    group: 'mediaRetrievalPlayback',
    subgroup: 'cache',
    type: 'toggle',
    unless: 'disableMediaFetching',
  },
  enableFolderWatcher: {
    depends: 'enableMediaDisplayButton',
    group: 'mediaRetrievalPlayback',
    subgroup: 'folderWatcher',
    type: 'toggle',
  },
  folderToWatch: {
    depends: ['enableFolderWatcher', 'enableMediaDisplayButton'],
    group: 'mediaRetrievalPlayback',
    subgroup: 'folderWatcher',
    type: 'path',
  },

  // Integrations
  zoomEnable: {
    group: 'integrations',
    subgroup: 'zoomIntegration',
    type: 'toggle',
  },
  zoomScreenShareShortcut: {
    depends: 'zoomEnable',
    group: 'integrations',
    rules: ['notEmpty'],
    subgroup: 'zoomIntegration',
    type: 'shortcut',
  },
  zoomAutoFocusMediaWindow: {
    depends: 'zoomEnable',
    group: 'integrations',
    subgroup: 'zoomIntegration',
    type: 'toggle',
  },
  obsEnable: {
    actions: ['obsConnect'],
    group: 'integrations',
    subgroup: 'obsStudio',
    type: 'toggle',
  },
  obsPassword: {
    actions: ['obsConnect'],
    depends: 'obsEnable',
    group: 'integrations',
    subgroup: 'obsStudio',
    type: 'text',
  },
  obsPort: {
    actions: ['obsConnect'],
    depends: 'obsEnable',
    group: 'integrations',
    rules: ['portNumber'],
    subgroup: 'obsStudio',
    type: 'text',
  },
  obsCameraScene: {
    depends: ['obsEnable', 'obsPort', 'obsPassword'],
    group: 'integrations',
    list: 'obsAllScenes',
    subgroup: 'obsStudio',
    type: 'list',
  },
  obsMediaScene: {
    depends: ['obsEnable', 'obsPort', 'obsPassword'],
    group: 'integrations',
    list: 'obsAllScenes',
    subgroup: 'obsStudio',
    type: 'list',
  },
  obsImageScene: {
    depends: ['obsEnable', 'obsPort', 'obsPassword', 'obsMediaScene'],
    group: 'integrations',
    list: 'obsAllScenes',
    subgroup: 'obsStudio',
    type: 'list',
  },
  obsPostponeImages: {
    depends: ['obsEnable', 'obsPort', 'obsPassword', 'obsMediaScene'],
    group: 'integrations',
    subgroup: 'obsStudio',
    type: 'toggle',
  },
  obsQuickToggle: {
    depends: ['obsEnable', 'obsPort', 'obsPassword', 'obsMediaScene'],
    group: 'integrations',
    subgroup: 'obsStudio',
    type: 'toggle',
  },
  obsSwitchSceneAfterMedia: {
    depends: ['obsEnable', 'obsPort', 'obsPassword', 'obsMediaScene'],
    group: 'integrations',
    subgroup: 'obsStudio',
    type: 'toggle',
  },
  obsRememberPreviouslyUsedScene: {
    depends: [
      'obsEnable',
      'obsPort',
      'obsPassword',
      'obsMediaScene',
      'obsCameraScene',
    ],
    group: 'integrations',
    subgroup: 'obsStudio',
    type: 'toggle',
  },
  obsHideIcons: {
    depends: ['obsEnable', 'obsPort', 'obsPassword'],
    group: 'integrations',
    subgroup: 'obsStudio',
    type: 'toggle',
  },
  enableCustomEvents: {
    group: 'integrations',
    subgroup: 'customEvents',
    type: 'toggle',
  },
  customEventMediaPlayShortcut: {
    depends: 'enableCustomEvents',
    group: 'integrations',
    subgroup: 'customEvents',
    type: 'shortcut',
  },
  customEventMediaPauseShortcut: {
    depends: 'enableCustomEvents',
    group: 'integrations',
    subgroup: 'customEvents',
    type: 'shortcut',
  },
  customEventMediaStopShortcut: {
    depends: 'enableCustomEvents',
    group: 'integrations',
    subgroup: 'customEvents',
    type: 'shortcut',
  },
  customEventLastSongShortcut: {
    depends: 'enableCustomEvents',
    group: 'integrations',
    subgroup: 'customEvents',
    type: 'shortcut',
  },

  // Meeting Recording
  recordingEnable: {
    group: 'integrations',
    subgroup: 'meetingRecording',
    type: 'toggle',
  },
  recordingStartShortcut: {
    depends: 'recordingEnable',
    group: 'integrations',
    rules: ['notEmpty'],
    subgroup: 'meetingRecording',
    type: 'shortcut',
  },
  recordingStopShortcut: {
    depends: ['recordingEnable', 'recordingStartShortcut'],
    group: 'integrations',
    subgroup: 'meetingRecording',
    type: 'shortcut',
  },
  recordingFolder: {
    depends: ['recordingEnable', 'recordingStartShortcut'],
    group: 'integrations',
    subgroup: 'meetingRecording',
    type: 'path',
  },

  // Advanced
  enableKeyboardShortcuts: {
    group: 'advanced',
    subgroup: 'keyboardShortcuts',
    type: 'toggle',
  },
  shortcutMediaWindow: {
    depends: 'enableKeyboardShortcuts',
    group: 'advanced',
    subgroup: 'keyboardShortcuts',
    type: 'shortcut',
  },
  shortcutMediaPrevious: {
    depends: 'enableKeyboardShortcuts',
    group: 'advanced',
    subgroup: 'keyboardShortcuts',
    type: 'shortcut',
  },
  shortcutMediaNext: {
    depends: 'enableKeyboardShortcuts',
    group: 'advanced',
    subgroup: 'keyboardShortcuts',
    type: 'shortcut',
  },
  shortcutMediaPauseResume: {
    depends: 'enableKeyboardShortcuts',
    group: 'advanced',
    subgroup: 'keyboardShortcuts',
    type: 'shortcut',
  },
  shortcutMediaStop: {
    depends: 'enableKeyboardShortcuts',
    group: 'advanced',
    subgroup: 'keyboardShortcuts',
    type: 'shortcut',
  },
  shortcutMusic: {
    depends: 'enableKeyboardShortcuts',
    group: 'advanced',
    subgroup: 'keyboardShortcuts',
    type: 'shortcut',
  },
  enableMediaWindowFadeTransitions: {
    depends: 'enableMediaDisplayButton',
    group: 'advanced',
    subgroup: 'media-display',
    type: 'toggle',
  },
  hideMediaLogo: {
    depends: 'enableMediaDisplayButton',
    group: 'advanced',
    subgroup: 'media-display',
    type: 'toggle',
  },
  maxRes: {
    depends: 'enableMediaDisplayButton',
    group: 'advanced',
    list: 'resolutions',
    rules: ['notEmpty'],
    subgroup: 'media-display',
    type: 'list',
  },
  includePrinted: {
    depends: 'enableMediaDisplayButton',
    group: 'advanced',
    subgroup: 'media-display',
    type: 'toggle',
  },
  excludeFootnotes: {
    depends: 'enableMediaDisplayButton',
    group: 'advanced',
    subgroup: 'media-display',
    type: 'toggle',
  },
  excludeTh: {
    depends: 'enableMediaDisplayButton',
    group: 'advanced',
    subgroup: 'media-display',
    type: 'toggle',
  },
  enableSubtitles: {
    depends: 'enableMediaDisplayButton',
    group: 'advanced',
    subgroup: 'subtitles',
    type: 'toggle',
  },
  langSubtitles: {
    depends: 'enableSubtitles',
    group: 'advanced',
    list: 'jwLanguages',
    subgroup: 'subtitles',
    type: 'list',
  },
  enableMediaAutoExport: {
    depends: 'enableMediaDisplayButton',
    group: 'advanced',
    subgroup: 'mediaExport',
    type: 'toggle',
    unless: 'disableMediaFetching',
  },
  mediaAutoExportFolder: {
    depends: ['enableMediaDisplayButton', 'enableMediaAutoExport'],
    group: 'advanced',
    subgroup: 'mediaExport',
    type: 'path',
    unless: 'disableMediaFetching',
  },
  convertFilesToMp4: {
    depends: ['enableMediaDisplayButton', 'enableMediaAutoExport'],
    group: 'advanced',
    subgroup: 'mediaExport',
    type: 'toggle',
    unless: 'disableMediaFetching',
  },
  musicVolume: {
    actions: ['setBackgroundMusicVolume'],
    depends: 'enableMusicButton',
    group: 'advanced',
    max: 100,
    min: 1,
    step: 1,
    subgroup: 'setupWizard.backgroundMusic',
    type: 'slider',
  },
  cacheFolder: {
    group: 'advanced',
    subgroup: 'cache',
    type: 'path',
  },
  enableCacheAutoClear: {
    depends: 'enableMediaDisplayButton',
    group: 'advanced',
    subgroup: 'cache',
    type: 'toggle',
    unless: 'disableMediaFetching',
  },
  baseUrl: {
    rules: ['notEmpty'],
    group: 'advanced',
    subgroup: 'dangerZone',
    type: 'text',
  },
  disableMediaFetching: {
    group: 'advanced',
    subgroup: 'dangerZone',
    type: 'toggle',
  },
};
/* eslint-enable perfectionist/sort-objects */

export const defaultSettings: SettingsValues = {
  autoStartAtLogin: false,
  autoStartMusic: true,
  baseUrl: 'jw.org',
  beginPlaybackPaused: false,
  cacheFolder: null,
  congregationName: null,
  convertFilesToMp4: false,
  coWeek: null,
  customEventLastSongShortcut: null,
  customEventMediaPauseShortcut: null,
  customEventMediaPlayShortcut: null,
  customEventMediaStopShortcut: null,
  darkMode: 'auto',
  disableMediaFetching: false,
  enableCacheAutoClear: true,
  enableCustomEvents: false,
  enableExtraCache: false,
  enableFolderWatcher: false,
  enableKeyboardShortcuts: false,
  enableMediaAutoExport: false,
  enableMediaDisplayButton: false,
  enableMediaWindowFadeTransitions: true,
  enableMusicButton: true,
  enableSubtitles: false,
  excludeFootnotes: false,
  excludeTh: true,
  firstDayOfWeek: 0,
  folderToWatch: '',
  hideMediaLogo: false,
  includePrinted: true,
  lang: 'E',
  langFallback: null,
  langSubtitles: null,
  localAppLang: 'en',
  localDateFormat: 'D MMMM YYYY',
  maxRes: '720p',
  mediaAutoExportFolder: '',
  meetingScheduleChangeDate: null,
  meetingScheduleChangeMwDay: null,
  meetingScheduleChangeMwStartTime: null,
  meetingScheduleChangeOnce: false,
  meetingScheduleChangeWeDay: null,
  meetingScheduleChangeWeStartTime: null,
  meetingStopBufferSeconds: 60,
  memorialDate: null,
  meteredConnection: false,
  musicVolume: 100,
  mwDay: null,
  mwStartTime: null,
  obsCameraScene: null,
  obsEnable: false,
  obsHideIcons: false,
  obsImageScene: null,
  obsMediaScene: null,
  obsPassword: null,
  obsPort: null,
  obsPostponeImages: false,
  obsQuickToggle: false,
  obsRememberPreviouslyUsedScene: true,
  obsSwitchSceneAfterMedia: false,
  recordingEnable: false,
  recordingFolder: null,
  recordingStartShortcut: null,
  recordingStopShortcut: null,
  shortcutMediaNext: null,
  shortcutMediaPauseResume: null,
  shortcutMediaPrevious: null,
  shortcutMediaStop: null,
  shortcutMediaWindow: null,
  shortcutMusic: null,
  weDay: null,
  weStartTime: null,
  zoomAutoFocusMediaWindow: false,
  zoomEnable: false,
  zoomScreenShareShortcut: null,
};
